/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.borak.hikingapp.server.view.forms;

import com.borak.hikingapp.commonlib.exceptions.CustomException;
import com.borak.hikingapp.commonlib.view.components.intf.IComponent;
import com.borak.hikingapp.server.logic.controllers.ControllerForms;
import com.borak.hikingapp.server.logic.controllers.Util;
import com.borak.hikingapp.commonlib.view.components.CompNumberInput;
import com.borak.hikingapp.server.view.components.validators.factory.ValidatorFactory;
import com.borak.hikingapp.server.view.helpers.Window;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Despot
 */
public class FrmConfigurationPort extends javax.swing.JDialog {

    private JPanel pnlInput;
    private JPanel pnlAction;

    private IComponent<Integer> componentPort;

    private JButton btnSave;

    public FrmConfigurationPort(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() {
        setTitle("Configure port");
        MigLayout migMain = new MigLayout("insets 0 0 0 0", "[]0[]", "");
        setLayout(migMain);
        try {
            ImageIcon favicon = new ImageIcon(Util.getInstance().getFrmConfigurationPortFavicon());
            setIconImage(favicon.getImage());
        } catch (CustomException ex) {
            ex.printStackTrace();
        }

        setFormElements();

        pack();
        setResizable(false);
        setLocationRelativeTo(null);
    }

    private void setFormElements() {
        setPanels();
        setComponents();
        setButtons();
    }

    private void setPanels() {
        MigLayout migInput = new MigLayout("insets 15 10 5 10", "", "");
        MigLayout migAction = new MigLayout("insets 10 10 10 10", "", "");
        pnlInput = new JPanel(migInput);
        pnlAction = new JPanel(migAction);

        add(pnlInput, "cell 0 0");
        add(pnlAction, "cell 1 0");
    }

    private void setComponents() {
        componentPort = new CompNumberInput(ValidatorFactory.getInstance().getPortValidator());
        componentPort.setCaption("Port:");
        componentPort.setCaptionSize(50);
        componentPort.setInputSize(200);
        componentPort.setErrorMessageSize(200);
        componentPort.setErrorMessage("");

        try {
            Integer i = Util.getInstance().getServerPort();
            componentPort.setValue(i);
        } catch (CustomException ex) {
            ex.printStackTrace();
        }
        pnlInput.add((Component) componentPort);
    }

    private void setButtons() {
        btnSave = new JButton("Save");

        btnSave.addActionListener((e) -> {
            btnSavePressed();
        });
        btnSave.setFocusable(false);
        pnlAction.add(btnSave);
    }

    private void btnSavePressed() {
        try {
            Integer port = componentPort.getValue();
            Util.getInstance().setServerPort(port);
            Window.successfulOperation(this, "Port configuration", "Port changes succesfully saved!");
            ControllerForms.getInstance().closeFrmConfigurationPort();
        } catch (CustomException ex) {
            ex.printStackTrace();
            componentPort.setErrorMessage(ex.getMessage());
            Window.unSuccessfulOperation(this, "Port configuration error", "Unable to save port changes!");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
