/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.borak.hikingapp.server.view.forms;

import com.borak.hikingapp.commonlib.exceptions.CustomException;
import com.borak.hikingapp.server.logic.controllers.ControllerForms;
import com.borak.hikingapp.server.logic.controllers.ControllerServer;
import com.borak.hikingapp.server.logic.controllers.Util;
import com.borak.hikingapp.server.view.helpers.Window;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Despot
 */
public class FrmMain extends javax.swing.JFrame {

    private JPanel pnlUsers;
    private JTable tblUsers;
    private JScrollPane scrollPane;

    private JLabel lblCaption;
    private JLabel lblServerStatus;

    private JMenuBar mbMain;
    private JMenu mbServer;
    private JMenu mbConfiguration;
    private JMenuItem miServerStart;
    private JMenuItem miServerStop;
    private JMenuItem miConfigurationDatabase;
    private JMenuItem miConfigurationPort;

    public FrmMain() {
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 188, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() {
        setTitle("Main menu");
        MigLayout migMain = new MigLayout("insets 0 0 0 0", "[]0[]", "[]20[]20[]");
        setLayout(migMain);
        try {
            ImageIcon favicon = new ImageIcon(Util.getInstance().getFrmMainFavicon());
            setIconImage(favicon.getImage());
        } catch (CustomException ex) {
            ex.printStackTrace();
        }

        setFormElements();

        pack();
        setResizable(false);
        setLocationRelativeTo(null);
    }

    private void setFormElements() {
        setMenus();
        setLabels();
        setUserPanel();
        setFrameListeners();
    }

    private void setMenus() {
        mbMain = new JMenuBar();

        mbServer = new JMenu("Server");
        mbConfiguration = new JMenu("Configuration");

        miServerStart = new JMenuItem("Start");
        miServerStop = new JMenuItem("Stop");
        miServerStop.setEnabled(false);

        miConfigurationDatabase = new JMenuItem("Database");
        miConfigurationPort = new JMenuItem("Port");

        mbServer.add(miServerStart);
        mbServer.add(miServerStop);

        mbConfiguration.add(miConfigurationDatabase);
        mbConfiguration.add(miConfigurationPort);

        mbMain.add(mbServer);
        mbMain.add(mbConfiguration);

        miServerStart.addActionListener(((e) -> {
            miServerStartPressed();
        }));
        miServerStop.addActionListener(((e) -> {
            miServerStopPressed();
        }));
        miConfigurationDatabase.addActionListener(((e) -> {
            miConfigurationDatabasePressed();
        }));
        miConfigurationPort.addActionListener(((e) -> {
            miConfigurationPortPressed();
        }));

        setJMenuBar(mbMain);
    }

    private void setLabels() {
        lblCaption = new JLabel("Server status:");
        Font captionFont = lblCaption.getFont();
        lblCaption.setFont(new Font(captionFont.getFamily(), captionFont.getStyle(), 15));

        lblServerStatus = new JLabel("OFFLINE");
        lblServerStatus.setFont(new Font("Consolas", Font.BOLD, 15));
        lblServerStatus.setForeground(Color.MAGENTA);

        add(lblCaption, "cell 0 1,gapleft 10");
        add(lblServerStatus, "cell 1 1,gapleft 10");
    }

    private void setUserPanel() {
        setPanel();
        setTable();
    }

    private void setPanel() {
        pnlUsers = new JPanel();
        MigLayout migUsers = new MigLayout("insets 5 5 0 5", "", "");
        pnlUsers.setLayout(migUsers);

        TitledBorder pnlUsersTitledBorder = BorderFactory.createTitledBorder("Logged users");
        pnlUsersTitledBorder.setTitleColor(Color.black);
        Border pnlUsersLineBorder = BorderFactory.createLineBorder(Color.black);
        pnlUsersTitledBorder.setBorder(pnlUsersLineBorder);
        pnlUsers.setBorder(pnlUsersTitledBorder);

        add(pnlUsers, "cell 0 2 2 1");
    }

    private void setTable() {
//        tblModel = new TableLoggedUsers();
        tblUsers = new JTable(ControllerForms.getInstance().getTableLoggedUsers());
        scrollPane = new JScrollPane(tblUsers);

        Dimension d = scrollPane.getPreferredSize();
        d.setSize(400, 200);
        scrollPane.setPreferredSize(d);

        pnlUsers.add(scrollPane, "cell 0 0");
    }

    private void setFrameListeners() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                closeOptionPressed();
            }
        });
    }
//====================================================================================

    private void miServerStartPressed() {
        if (ControllerServer.getInstance().isOffline()) {
            try {
                ControllerServer.getInstance().startServer();
                miServerStart.setEnabled(false);
                miConfigurationDatabase.setEnabled(false);
                miConfigurationPort.setEnabled(false);
                miServerStop.setEnabled(true);
                lblServerStatus.setText("ONLINE");
                lblServerStatus.setForeground(Color.GREEN.darker());
            } catch (CustomException ex) {
                ex.printStackTrace();
                Window.unSuccessfulOperation(this, "Server error", "Unable to boot server: " + ex.getMessage());
            }
        }
    }

    private void miServerStopPressed() {
        if (ControllerServer.getInstance().isOnline()) {
            try {
                ControllerServer.getInstance().stopServer();
                miServerStart.setEnabled(true);
                miConfigurationDatabase.setEnabled(true);
                miConfigurationPort.setEnabled(true);
                miServerStop.setEnabled(false);
                lblServerStatus.setText("OFFLINE");
                lblServerStatus.setForeground(Color.MAGENTA);
            } catch (CustomException ex) {
                ex.printStackTrace();
                Window.unSuccessfulOperation(this, "Server error", "Unable to terminate server: " + ex.getMessage());

            }
        }
    }

    private void miConfigurationDatabasePressed() {
        if (ControllerServer.getInstance().isOnline()) {
            Window.unSuccessfulOperation(this, "Configure database error", "Server must be offline to change database!");
        } else {
            ControllerForms.getInstance().openFrmConfigurationDatabase();
        }
    }

    private void miConfigurationPortPressed() {
        if (ControllerServer.getInstance().isOnline()) {
            Window.unSuccessfulOperation(this, "Configure port error", "Server must be offline to change port!");
        } else {
            ControllerForms.getInstance().openFrmConfigurationPort();
        }

    }

    private void closeOptionPressed() {
        if (Window.question(this, "Close application", "Are you sure you wish to exit?")) {
            try {
                if (ControllerServer.getInstance().isOnline()) {
                    ControllerServer.getInstance().stopServer();
                }
                System.exit(0);
            } catch (CustomException ex) {
                ex.printStackTrace();
                Window.unSuccessfulOperation(this, "Close application error", "Unable to close application: " + ex.getMessage());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
