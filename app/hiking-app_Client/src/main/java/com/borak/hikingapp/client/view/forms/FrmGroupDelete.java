/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.borak.hikingapp.client.view.forms;

import com.borak.hikingapp.client.logic.controllers.ControllerSO;
import com.borak.hikingapp.client.logic.controllers.Util;
import com.borak.hikingapp.client.view.components.validators.factory.ValidatorFactory;
import com.borak.hikingapp.client.view.helpers.Window;
import com.borak.hikingapp.client.view.tables.GroupTableModel;
import com.borak.hikingapp.commonlib.communication.TransferObject;
import com.borak.hikingapp.commonlib.domain.classes.HikingGroup;
import com.borak.hikingapp.commonlib.domain.enums.ResponseType;
import com.borak.hikingapp.commonlib.exceptions.CustomException;
import com.borak.hikingapp.commonlib.view.components.CompStringInput;
import com.borak.hikingapp.commonlib.view.components.api.IComponent;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Despot
 */
public class FrmGroupDelete extends javax.swing.JDialog {

    private IComponent<String> filterComponent;

    private JTable tblGroups;
    private GroupTableModel tblModel;
    private JScrollPane scrollPane;

    private JButton btnFilter;
    private JButton btnDelete;

    private JPanel pnlFilter;
    private JPanel pnlAction;
    private JPanel pnlShow;

    public FrmGroupDelete(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() {
        setTitle("Delete hiking group");
        MigLayout mig = new MigLayout("", "[]0[]", "[]0[]");
        setLayout(mig);
        try {
            ImageIcon favicon = new ImageIcon(Util.getInstance().getFrmGroupDeleteFavicon());
            setIconImage(favicon.getImage());
        } catch (CustomException ex) {
            ex.printStackTrace();
        }

        setElements();

        pack();
        setLocationRelativeTo(null);
        setResizable(false);
    }

    private void setElements() {
        setPanels();
        setComponents();
        setButtons();
        setTable();

    }

    private void setPanels() {
        MigLayout migFilter = new MigLayout("insets 5 5 5 15", "", "");
        MigLayout migAction = new MigLayout("insets 0 0 10 0", "[]8[]", "");
        MigLayout migShow = new MigLayout("insets 0 0 0 0", "", "");

        pnlFilter = new JPanel(migFilter);
        pnlAction = new JPanel(migAction);
        pnlShow = new JPanel(migShow);

        add(pnlFilter, "cell 0 0");
        add(pnlAction, "cell 1 0");
        add(pnlShow, "cell 0 1 2 1");// col row width height
    }

    private void setComponents() {
        filterComponent = new CompStringInput(ValidatorFactory.getInstance().getGroupFilterValidator());
        filterComponent.setCaption("Find by name:");
        filterComponent.setCaptionWidth(100);
        filterComponent.setInputWidth(200);
        filterComponent.setErrorMessageWidth(200);
        filterComponent.setErrorMessage("");
        pnlFilter.add((JPanel) filterComponent, "cell 0 0");
    }

    private void setTable() {
        tblModel = new GroupTableModel();
        tblGroups = new JTable(tblModel);

        scrollPane = new JScrollPane(tblGroups);
        Dimension d = scrollPane.getPreferredSize();
        d.setSize(470, d.getHeight());
        scrollPane.setPreferredSize(d);
        pnlShow.add(scrollPane, "cell 0 0");
    }

    private void setButtons() {
        btnFilter = new JButton("Find");
        btnDelete = new JButton("Delete");

        Dimension d1 = btnFilter.getPreferredSize();
        Dimension d2 = btnDelete.getPreferredSize();

        Dimension d = new Dimension(findMax(d1.getWidth(), d2.getWidth()), findMax(d1.getHeight(), d2.getHeight()));

        btnFilter.setPreferredSize(d);
        btnDelete.setPreferredSize(d);

        btnFilter.setFocusable(false);
        btnDelete.setFocusable(false);

        addListeners();

        pnlAction.add(btnFilter, "cell 0 0");
        pnlAction.add(btnDelete, "cell 1 0");
    }

    private void addListeners() {
        btnFilter.addActionListener((ActionEvent e) -> {
            btnFilterPressed();
        });
        btnDelete.addActionListener((ActionEvent e) -> {
            btnDeletePressed();
        });
    }

    private void btnFilterPressed() {
        try {
            filterComponent.setErrorMessage("");
            tblModel.removeAllGroups();
            String name = filterComponent.getValue();
            try {
                TransferObject response = ControllerSO.getInstance().findHikingGroups(name);
                if (response.getResponseType() == ResponseType.SUCCESS) {
                    List<HikingGroup> groups = (List<HikingGroup>) response.getArgument();
                    if (groups == null || groups.isEmpty()) {
                        Window.unSuccessfulOperation(this, "Error", "No hiking groups found with given name!");
                    } else {
                        tblModel.loadGroups(groups);
                        Window.successfulOperation(this, "Success", "Found " + (groups.size() == 1 ? "1 group" : groups.size() + " groups") + " with given name!");
                    }
                } else {
                    throw response.getException();
                }
            } catch (CustomException ex) {
                ex.printStackTrace();
                Window.unSuccessfulOperation(this, "Error", ex.getMessage());
            }
        } catch (CustomException ex) {
            ex.printStackTrace();
            filterComponent.setErrorMessage(ex.getMessage());
            Window.unSuccessfulOperation(this, "Error", ex.getMessage());
        }

    }

    private void btnDeletePressed() {
        int[] rows = tblGroups.getSelectedRows();
        if (rows.length == 0) {
            Window.unSuccessfulOperation(this, "Error", "No selected hiking group!");
        } else if (rows.length > 1) {
            Window.unSuccessfulOperation(this, "Error", "Pick 1 group you wish to delete!");
        } else {
            HikingGroup g = tblModel.getGroup(rows[0]);
            if (g != null) {
                if (Window.question(this, "Delete hiking group", "Do you wish to delete group '" + g + "'?")) {
                    try {
                        TransferObject response = ControllerSO.getInstance().deleteHikingGroup(g);
                        if (response.getResponseType() == ResponseType.SUCCESS) {
                            tblModel.removeGroup(rows[0]);
                            Window.successfulOperation(this, "Success", "Group " + g + " successfully deleted!");
                        } else {
                            throw response.getException();
                        }
                    } catch (CustomException ex) {
                        Window.unSuccessfulOperation(this, "Error", ex.getMessage());
                    }
                }
            } else {
                Window.unSuccessfulOperation(this, "Error", "No selected hiking group!");
            }
        }
    }

    private int findMax(double a, double b) {
        return a > b ? (int) a : (int) b;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
