/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.borak.hikingapp.client.view.forms;

import com.borak.hikingapp.client.logic.controllers.ControllerForms;
import com.borak.hikingapp.client.logic.controllers.ControllerSO;
import com.borak.hikingapp.client.logic.controllers.Util;
import com.borak.hikingapp.client.view.components.CompDateAdvanced;
import com.borak.hikingapp.client.view.components.CompGenderBinaryChoice;
import com.borak.hikingapp.client.view.components.CompPlaceInput;
import com.borak.hikingapp.client.view.components.validators.factory.ValidatorFactory;
import com.borak.hikingapp.client.view.helpers.Window;
import com.borak.hikingapp.commonlib.communication.TransferObject;
import com.borak.hikingapp.commonlib.domain.classes.Hiker;
import com.borak.hikingapp.commonlib.domain.classes.Place;
import com.borak.hikingapp.commonlib.domain.enums.Gender;
import com.borak.hikingapp.commonlib.domain.enums.ResponseType;
import com.borak.hikingapp.commonlib.exceptions.CustomException;
import com.borak.hikingapp.commonlib.view.components.CompNumberInput;
import com.borak.hikingapp.commonlib.view.components.CompStringInput;
import com.borak.hikingapp.commonlib.view.components.api.IComponent;
import java.awt.event.ActionEvent;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Despot
 */
public class FrmHikerCreate extends javax.swing.JDialog {

    private IComponent<String> ucinComp;
    private IComponent<String> firstNameComp;
    private IComponent<String> lastNameComp;
    private IComponent<Gender> genderComp;
    private IComponent<GregorianCalendar> dateOfBirthComp;
    private IComponent<Integer> yearsOfExperienceComp;
    private IComponent<Place> placeComp;

    private JPanel pnlComponents;
    private JPanel pnlButtons;

    private JButton btnSave;

    public FrmHikerCreate(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() {
        setTitle("Create hiker");
        MigLayout migMain = new MigLayout("", "", "[]0[]");
        setLayout(migMain);
        try {
            ImageIcon favicon = new ImageIcon(Util.getInstance().getFrmHikerCreateFavicon());
            setIconImage(favicon.getImage());
        } catch (CustomException ex) {
            ex.printStackTrace();
        }

        setFormElements();

        pack();
        setResizable(false);
        setLocationRelativeTo(null);
    }

    private void setFormElements() {
        setPanels();
        setComponents();
        setButtons();
    }

    private void setPanels() {
        MigLayout migComp = new MigLayout("", "", "[]5[]5[]5[]15[]20[]5[]");
        MigLayout migBtn = new MigLayout("", "", "");

        pnlComponents = new JPanel(migComp);
        pnlButtons = new JPanel(migBtn);

        add(pnlComponents, "cell 0 0");
        add(pnlButtons, "cell 0 1,align right");
    }

    private void setComponents() {

        ucinComp = new CompStringInput(ValidatorFactory.getInstance().getHikerUcinValidator());
        ucinComp.setCaption("UCIN: ");
        ucinComp.setCaptionWidth(120);
        ucinComp.setInputWidth(200);
        ucinComp.setErrorMessageWidth(200);
        ucinComp.setErrorMessage("");

        firstNameComp = new CompStringInput(ValidatorFactory.getInstance().getHikerFirstNameValidator());
        firstNameComp.setCaption("First name: ");
        firstNameComp.setCaptionWidth(120);
        firstNameComp.setInputWidth(200);
        firstNameComp.setErrorMessageWidth(200);
        firstNameComp.setErrorMessage("");

        lastNameComp = new CompStringInput(ValidatorFactory.getInstance().getHikerLastNameValidator());
        lastNameComp.setCaption("Last name: ");
        lastNameComp.setCaptionWidth(120);
        lastNameComp.setInputWidth(200);
        lastNameComp.setErrorMessageWidth(200);
        lastNameComp.setErrorMessage("");

        genderComp = new CompGenderBinaryChoice();
        genderComp.setCaption("Gender: ");
        genderComp.setCaptionWidth(170);
        genderComp.setErrorMessage("");

        dateOfBirthComp = new CompDateAdvanced();
        dateOfBirthComp.setCaption("Date of birth: ");
        dateOfBirthComp.setCaptionWidth(140);
        dateOfBirthComp.setErrorMessage("");

        yearsOfExperienceComp = new CompNumberInput(ValidatorFactory.getInstance().getHikerYearsOfExperienceValidator());
        yearsOfExperienceComp.setCaption("Years of experience: ");
        //yearsOfExperienceComp.setCaptionSize(130);
        yearsOfExperienceComp.setInputWidth(70);
        yearsOfExperienceComp.setErrorMessageWidth(200);
        yearsOfExperienceComp.setErrorMessage("");

        List<Place> places;
        try {
            TransferObject response = ControllerSO.getInstance().getAllPlaces();
            if (response.getResponseType() == ResponseType.SUCCESS) {
                places = (List<Place>) response.getArgument();
                if (places == null || places.isEmpty()) {
                    placeComp = new CompPlaceInput(null, ValidatorFactory.getInstance().getPlaceValidator());
                    placeComp.setErrorMessageWidth(200);
                    placeComp.setErrorMessage("There are no places!");
                } else {
                    Place[] pom = places.toArray(new Place[0]);
                    placeComp = new CompPlaceInput(pom, ValidatorFactory.getInstance().getPlaceValidator());
                    placeComp.setErrorMessageWidth(200);
                    placeComp.setErrorMessage("");
                }
            } else {
                throw response.getException();
            }
        } catch (CustomException ex) {
            ex.printStackTrace();
            placeComp = new CompPlaceInput(null, ValidatorFactory.getInstance().getPlaceValidator());
            placeComp.setErrorMessageWidth(200);
            placeComp.setErrorMessage("Unable to retreive places!");
        }

        placeComp.setCaption("Place: ");
        placeComp.setCaptionWidth(120);
        placeComp.setInputWidth(200);

        pnlComponents.add(((JPanel) ucinComp), "cell 0 0");
        pnlComponents.add(((JPanel) firstNameComp), "cell 0 1");
        pnlComponents.add(((JPanel) lastNameComp), "cell 0 2");
        pnlComponents.add(((JPanel) genderComp), "cell 0 3");
        pnlComponents.add(((JPanel) dateOfBirthComp), "cell 0 4");
        pnlComponents.add(((JPanel) yearsOfExperienceComp), "cell 0 5");
        pnlComponents.add(((JPanel) placeComp), "cell 0 6");

    }

    private void setButtons() {
        btnSave = new JButton("Save");
        btnSave.setFocusable(false);

        addListeners();

        pnlButtons.add(btnSave);
    }

    private void addListeners() {
        btnSave.addActionListener((ActionEvent e) -> {
            btnSavePressed();
        });
    }
//===============================================================================

    private void btnSavePressed() {

        ucinComp.setErrorMessage("");
        firstNameComp.setErrorMessage("");
        lastNameComp.setErrorMessage("");
        genderComp.setErrorMessage("");
        dateOfBirthComp.setErrorMessage("");
        yearsOfExperienceComp.setErrorMessage("");
        placeComp.setErrorMessage("");

        String ucin = "";
        String firstName = "";
        String lastName = "";
        Gender gender = null;
        GregorianCalendar dateOfBirth = null;
        Integer yearsOfExperience = null;
        Place place = null;
        String errorMessage = "";

        boolean gate = true;

        try {
            ucin = ucinComp.getValue();
        } catch (CustomException ex) {
            ucinComp.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            firstName = firstNameComp.getValue();
        } catch (CustomException ex) {
            firstNameComp.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            lastName = lastNameComp.getValue();
        } catch (CustomException ex) {
            lastNameComp.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            gender = genderComp.getValue();
        } catch (CustomException ex) {
            genderComp.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            dateOfBirth = dateOfBirthComp.getValue();
        } catch (CustomException ex) {
            dateOfBirthComp.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            yearsOfExperience = yearsOfExperienceComp.getValue();
        } catch (CustomException ex) {
            yearsOfExperienceComp.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            place = placeComp.getValue();
        } catch (CustomException ex) {
            placeComp.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage();
            gate = false;
        }

        if (gate) {
            Hiker h = new Hiker(ucin, firstName, lastName, gender, dateOfBirth, yearsOfExperience, place);
            try {
                TransferObject response = ControllerSO.getInstance().createHiker(h);
                if (response.getResponseType() == ResponseType.SUCCESS) {
                    Window.successfulOperation(this, "Created hiker", "Successful creation of new hiker!");
                    ControllerForms.getInstance().closeFrmHikerCreate();
                } else {
                    throw response.getException();
                }
            } catch (CustomException ex) {
                ex.printStackTrace();
                Window.unSuccessfulOperation(this, "Failed to create hiker", ex.getMessage());
            }
        } else {
            Window.unSuccessfulOperation(this, "Failed to create hiker", errorMessage);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
