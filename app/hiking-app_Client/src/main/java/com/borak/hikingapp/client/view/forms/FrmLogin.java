/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.borak.hikingapp.client.view.forms;

import com.borak.hikingapp.client.logic.controllers.ControllerForms;
import com.borak.hikingapp.client.logic.controllers.ControllerSO;
import com.borak.hikingapp.client.logic.controllers.Util;
import com.borak.hikingapp.client.view.components.CompPswInput;
import com.borak.hikingapp.client.view.components.validators.factory.ValidatorFactory;
import com.borak.hikingapp.client.view.helpers.Window;
import com.borak.hikingapp.commonlib.communication.TransferObject;
import com.borak.hikingapp.commonlib.domain.classes.User;
import com.borak.hikingapp.commonlib.domain.enums.ErrorType;
import com.borak.hikingapp.commonlib.domain.enums.ResponseType;
import com.borak.hikingapp.commonlib.exceptions.CustomException;
import com.borak.hikingapp.commonlib.view.components.CompStringInput;
import com.borak.hikingapp.commonlib.view.components.api.IComponent;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Despot
 */
public class FrmLogin extends javax.swing.JFrame {

    private IComponent<String> usernameComp;
    private IComponent<String> passwordComp;
    private JButton btnLogin;
    private JButton btnRegister;
    private JPanel pnlComponents;
    private JPanel pnlButtons;

    public FrmLogin() {
        initComponents();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() {
        setTitle("Login");
        //we have 1 row and 2 columns (2 panels set one after the other)
        MigLayout migMain = new MigLayout("", "[]0[]", "[top]");
        setLayout(migMain);
        try {
            ImageIcon favicon = new ImageIcon(Util.getInstance().getFrmLoginFavicon());
            setIconImage(favicon.getImage());
        } catch (CustomException ex) {
            ex.printStackTrace();
        }

        setFormElements();

        pack();
        setResizable(false);
        setLocationRelativeTo(null);
    }

    private void setFormElements() {
        setPanels();
        setComponents();
        setButtons();
    }

    private void setPanels() {
        MigLayout migComp = new MigLayout("insets 7 0 0 7", "", "[]5[]");
        MigLayout migBtn = new MigLayout("insets 7 0 0 0", "", "[]8[]");

        pnlComponents = new JPanel(migComp);
        pnlButtons = new JPanel(migBtn);

        add(pnlComponents);
        add(pnlButtons);
    }

    private void setComponents() {
        usernameComp = new CompStringInput(ValidatorFactory.getInstance().getUserUsernameValidator());
        usernameComp.setCaption("Username:");
        usernameComp.setCaptionWidth(100);
        usernameComp.setInputWidth(200);
        usernameComp.setErrorMessageWidth(200);
        usernameComp.setErrorMessage("");

        passwordComp = new CompPswInput(ValidatorFactory.getInstance().getUserPasswordValidator());
        passwordComp.setCaption("Password: ");
        passwordComp.setCaptionWidth(100);
        passwordComp.setInputWidth(200);
        passwordComp.setErrorMessageWidth(200);
        passwordComp.setErrorMessage("");

        pnlComponents.add(((JPanel) usernameComp), "cell 0 0");
        pnlComponents.add(((JPanel) passwordComp), "cell 0 1");
    }

    private void setButtons() {
        btnLogin = new JButton("Login");
        btnRegister = new JButton("Register");

        btnLogin.setFocusable(false);
        btnRegister.setFocusable(false);

        Dimension d = btnRegister.getPreferredSize();
        int width = (int) d.getWidth();
        int height = (int) d.getHeight();
        btnLogin.setPreferredSize(new Dimension(width, height));

        addListeners();

        pnlButtons.add(btnLogin, "cell 0 0");
        pnlButtons.add(btnRegister, "cell 0 1");
    }

    private void addListeners() {
        btnLogin.addActionListener((ActionEvent e) -> {
            btnLoginPressed();
        });
        btnRegister.addActionListener((ActionEvent e) -> {
            btnRegisterPressed();
        });

    }
//============================================================================

    private void btnLoginPressed() {
        usernameComp.setErrorMessage("");
        passwordComp.setErrorMessage("");

        String username = "";
        String password = "";
        String errorMessage = "";
        boolean gate = true;

        try {
            username = usernameComp.getValue();
        } catch (CustomException ex) {
            usernameComp.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            password = passwordComp.getValue();
        } catch (CustomException ex) {
            passwordComp.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage();
            gate = false;
        }
        if (gate) {
            User user = new User(username, password);
            try {
                TransferObject response = ControllerSO.getInstance().login(user);
                if (response.getResponseType() == ResponseType.SUCCESS) {
                    Window.successfulOperation(this, "Successful login", "Welcome " + (User)response.getArgument());
                    ControllerForms.getInstance().openFrmMain();
                    ControllerForms.getInstance().closeFrmLogin();
                } else {
                    throw response.getException();
                }
            } catch (CustomException e) {
                e.printStackTrace();
                Window.unSuccessfulOperation(this, "Unsuccessful login", e.getMessage());
            }
        } else {
            Window.unSuccessfulOperation(this, "Unsuccessful login", errorMessage);
        }

    }

    private void btnRegisterPressed() {
        ControllerForms.getInstance().openFrmRegister();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
