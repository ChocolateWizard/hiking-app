/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.borak.hikingapp.client.view.forms;

import com.borak.hikingapp.client.logic.controllers.ControllerSO;
import com.borak.hikingapp.client.logic.controllers.Util;
import com.borak.hikingapp.client.view.tables.HikersTableModel;
import com.borak.hikingapp.client.view.tables.HikingActivitySchedule;
import com.borak.hikingapp.commonlib.communication.TransferObject;
import com.borak.hikingapp.commonlib.domain.classes.Hiker;
import com.borak.hikingapp.commonlib.domain.classes.HikingActivity;
import com.borak.hikingapp.commonlib.domain.classes.HikingGroup;
import com.borak.hikingapp.commonlib.domain.classes.HikingGroupPlan;
import com.borak.hikingapp.commonlib.domain.enums.ErrorType;
import com.borak.hikingapp.commonlib.domain.enums.ResponseType;
import com.borak.hikingapp.commonlib.exceptions.CustomException;
import java.awt.Dimension;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Mr. Poyo
 */
public class FrmPlanShow_Dialog extends javax.swing.JDialog {

    private JTabbedPane pnlTabbedPane;
    private JPanel pnlMembers;   
    private JPanel pnlActivities;

    private HikersTableModel tblMembersModel;
    private JTable tblMembers;
    private JScrollPane scrMembers;
    
    private HikingActivitySchedule tblSchedule;

    private HikingGroup hikingGroup;
    private List<Hiker> hikers;
    private List<HikingActivity> activities;

    public FrmPlanShow_Dialog(java.awt.Dialog parent, boolean modal, HikingGroup hikingGroup) throws CustomException {
        super(parent, modal);
        initComponents();
        this.hikingGroup = hikingGroup;
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() throws CustomException {
        setTitle("Group activities plan");
        MigLayout migMain = new MigLayout("", "", "");
        setLayout(migMain);
        try {
            ImageIcon favicon = new ImageIcon(Util.getInstance().getFrmProfileCreateFavicon());
            setIconImage(favicon.getImage());
        } catch (CustomException ex) {
            ex.printStackTrace();
        }

        setFormElements();

        pack();
        setResizable(false);
        setLocationRelativeTo(null);
    }

    private void setFormElements() throws CustomException {
        getData();
        setPanels();
    }

    private void getData() throws CustomException {
        try {
            TransferObject response = ControllerSO.getInstance().getMembersAndActivities(hikingGroup);
            if (response.getResponseType() == ResponseType.SUCCESS) {
                HikingGroupPlan plan = (HikingGroupPlan) response.getArgument();
                hikers = plan.getHikers();
                activities = plan.getActivities();
            } else {
                throw response.getException();
            }
        } catch (CustomException ex) {
            throw new CustomException(ErrorType.GET_HIKING_GROUP_PLAN_ERROR, "Unable to retreive group plan!", ex);
        }
    }

    private void setPanels() throws CustomException {
        pnlTabbedPane = new JTabbedPane();
        setMembersPanel();
        setActivitiesPanel();

        pnlTabbedPane.insertTab("Members", null, scrMembers, "Hikers in this group", 0);
        pnlTabbedPane.insertTab("Activities", null, pnlActivities, "Hiking activities of this group", 1);
        add(pnlTabbedPane, "cell 0 0");
    }

    private void setMembersPanel() {
        MigLayout migMembers = new MigLayout("insets 0 0 0 0", "", "");
        pnlMembers = new JPanel(migMembers);

        tblMembersModel = new HikersTableModel(hikers, true);
        tblMembers = new JTable(tblMembersModel);
        scrMembers = new JScrollPane(tblMembers);       
        scrMembers.add(tblMembers.getTableHeader());
        pnlMembers.add(scrMembers);


    }

    private void setActivitiesPanel() throws CustomException {
        MigLayout migActivities = new MigLayout("insets 0 0 0 0", "", "");
        pnlActivities = new JPanel(migActivities);
        
        tblSchedule=new HikingActivitySchedule(activities);
//        tblSchedule.setPreferredSize(tblMembers.getPreferredSize());
        pnlActivities.add(tblSchedule,"cell 0 0");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
