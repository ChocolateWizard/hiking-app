/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.borak.hikingapp.client.view.forms;

import com.borak.hikingapp.client.logic.controllers.ControllerForms;
import com.borak.hikingapp.client.logic.controllers.ControllerSO;
import com.borak.hikingapp.client.logic.controllers.Util;
import com.borak.hikingapp.client.view.components.CompDateAdvanced;
import com.borak.hikingapp.client.view.components.CompPlaceInput;
import com.borak.hikingapp.client.view.components.CompStringInputLarge;
import com.borak.hikingapp.client.view.components.CompYesNoRB;
import com.borak.hikingapp.client.view.components.validators.factory.ValidatorFactory;
import com.borak.hikingapp.client.view.helpers.Window;
import com.borak.hikingapp.client.view.tables.GroupActivityTableModel;
import com.borak.hikingapp.commonlib.communication.TransferObject;
import com.borak.hikingapp.commonlib.domain.classes.HikingActivity;
import com.borak.hikingapp.commonlib.domain.classes.HikingGroup;
import com.borak.hikingapp.commonlib.domain.classes.Place;
import com.borak.hikingapp.commonlib.domain.enums.ResponseType;
import com.borak.hikingapp.commonlib.exceptions.CustomException;
import com.borak.hikingapp.commonlib.view.components.CompNumberInput;
import com.borak.hikingapp.commonlib.view.components.CompStringInput;
import com.borak.hikingapp.commonlib.view.components.intf.IComponent;
import java.awt.Color;
import java.awt.Dimension;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Despot
 */
public class FrmGroupCreate extends javax.swing.JDialog {

    //Group panels
    private JPanel pnlGroup;
    private JPanel pnlGroupComponents;
    private JPanel pnlGroupButtons;

    //Activity panels
    private JPanel pnlActivity;
    private JPanel pnlActivityView;
    private JPanel pnlActivityViewTable;
    private JPanel pnlActivityViewButtons;
    private JPanel pnlActivityAdd;
    private JPanel pnlActivityAddComponents;
    private JPanel pnlActivityAddButtons;

    //Group parameters components
    private IComponent<String> crnComponent;
    private IComponent<String> nameComponent;
    private IComponent<String> descriptionComponent;
    private IComponent<String> resourcesComponent;
    private IComponent<Boolean> hasLiscenceComponent;
    private IComponent<Place> placeComponent;

    //Group activity parameters components
    private IComponent<Integer> activityOrderNumberComponent;
    private IComponent<String> activityNameComponent;
    private IComponent<String> activityDescriptionComponent;
    private IComponent<GregorianCalendar> activityDateComponent;

    //table of activities
    private GroupActivityTableModel tblModel;
    private JTable tblActivities;
    private JScrollPane scrollPane;

    //buttons
    private JButton btnGroupSave;
    private JButton btnActivityAdd;
    private JButton btnActivityViewEdit;
    private JButton btnActivityRemove;
    private JButton btnActivitySave;
    //private JButton btnActivityEdit;

    //Data
    //private Long orderNumber;
    private final HikingGroup mainGroup;
    //Activity currently selected to be edited
    private HikingActivity editableActivity;

    public FrmGroupCreate(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        mainGroup = new HikingGroup();
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() {
        setTitle("Create hiking group");
        MigLayout migMain = new MigLayout("", "", "[]0[]");
        setLayout(migMain);
        try {
            ImageIcon favicon = new ImageIcon(Util.getInstance().getFrmGroupCreateFavicon());
            setIconImage(favicon.getImage());
        } catch (CustomException ex) {
            ex.printStackTrace();
        }

        setFormElements();

        pack();
        setResizable(false);
        setLocationRelativeTo(null);
    }

    private void setFormElements() {
        setPanels();
        setComponents();
        setTable();
        setButtons();
    }
//=====================================================================================
//===============================PANELS======================================================
//=====================================================================================

    private void setPanels() {
        setGroupPanels();
        setActivityPanels();
    }

    private void setGroupPanels() {
        MigLayout migGroup = new MigLayout("insets 0 0 0 0", "[]0[]", "");
        MigLayout migGroupComponents = new MigLayout("insets 5 5 5 5", "[]10[]", "[]5[]5[]");
        MigLayout migGroupButtons = new MigLayout("insets 0 0 0 0", "", "");

        pnlGroup = new JPanel(migGroup);
        pnlGroupComponents = new JPanel(migGroupComponents);
        pnlGroupButtons = new JPanel(migGroupButtons);

        TitledBorder groupTitledBorder = BorderFactory.createTitledBorder("Hiker group");
        groupTitledBorder.setTitleColor(Color.black);
        Border groupBorder = BorderFactory.createLineBorder(Color.black);
        groupTitledBorder.setBorder(groupBorder);
        pnlGroup.setBorder(groupTitledBorder);

        pnlGroup.add(pnlGroupComponents, "cell 0 0");
        pnlGroup.add(pnlGroupButtons, "cell 1 0");
        add(pnlGroup, "cell 0 0");
    }

    private void setActivityPanels() {
        MigLayout migActivity = new MigLayout("insets 0 0 0 0", "", "[]0[]");
        pnlActivity = new JPanel(migActivity);

        TitledBorder activityTitledBorder = BorderFactory.createTitledBorder("Group activities");
        activityTitledBorder.setTitleColor(Color.black);
        Border activityBorder = BorderFactory.createLineBorder(Color.black);
        activityTitledBorder.setBorder(activityBorder);
        pnlActivity.setBorder(activityTitledBorder);

        setActivityViewPanels();
        setActivityAddPanels();

        pnlActivity.add(pnlActivityView, "cell 0 0");
        pnlActivity.add(pnlActivityAdd, "cell 0 1");
        add(pnlActivity, "cell 0 1");
    }

    private void setActivityViewPanels() {
        MigLayout migActivityView = new MigLayout("insets 0 0 0 0", "[]0[]", "");
        MigLayout migActivityViewTable = new MigLayout("insets 0 0 0 0", "", "");
        MigLayout migActivityViewButtons = new MigLayout("insets 0 0 0 0", "", "[]0[]");

        pnlActivityView = new JPanel(migActivityView);
        pnlActivityViewTable = new JPanel(migActivityViewTable);
        pnlActivityViewButtons = new JPanel(migActivityViewButtons);

        pnlActivityView.add(pnlActivityViewTable, "cell 0 0");
        pnlActivityView.add(pnlActivityViewButtons, "cell 1 0");

    }

    private void setActivityAddPanels() {
        MigLayout migActivityAdd = new MigLayout("insets 0 0 0 0", "[]0[]", "");
        MigLayout migActivityAddComponents = new MigLayout("insets 5 5 5 5", "", "[]5[]5[]5[]");
        MigLayout migActivityAddButtons = new MigLayout("insets 0 0 0 0", "", "[]0[]");

        pnlActivityAdd = new JPanel(migActivityAdd);
        pnlActivityAddComponents = new JPanel(migActivityAddComponents);
        pnlActivityAddButtons = new JPanel(migActivityAddButtons);

        TitledBorder activityAddComponentsTitledBorder = BorderFactory.createTitledBorder("Activity information");
        activityAddComponentsTitledBorder.setTitleColor(Color.black);
        Border activityAddComponentsBorder = BorderFactory.createLineBorder(Color.black);
        activityAddComponentsTitledBorder.setBorder(activityAddComponentsBorder);
        pnlActivityAddComponents.setBorder(activityAddComponentsTitledBorder);

        pnlActivityAdd.add(pnlActivityAddComponents, "cell 0 0");
        pnlActivityAdd.add(pnlActivityAddButtons, "cell 1 0");
    }
//=====================================================================================
//===============================COMPONENTS============================================
//=====================================================================================

    private void setComponents() {
        setGroupComponents();
        setActivityComponents();
    }

    private void setGroupComponents() {
        crnComponent = new CompStringInput(ValidatorFactory.getInstance().getGroupCrnValidator());
        crnComponent.setCaption("CRN:");
        crnComponent.setCaptionSize(100);
        crnComponent.setInputSize(200);
        crnComponent.setErrorMessageSize(200);
        crnComponent.setErrorMessage("");

        nameComponent = new CompStringInput(ValidatorFactory.getInstance().getGroupNameValidator());
        nameComponent.setCaption("Name:");
        nameComponent.setCaptionSize(80);
        nameComponent.setInputSize(200);
        nameComponent.setErrorMessageSize(200);
        nameComponent.setErrorMessage("");

        hasLiscenceComponent = new CompYesNoRB();
        hasLiscenceComponent.setCaption("Is it liscenced?");
        hasLiscenceComponent.setCaptionSize(140);
        hasLiscenceComponent.setErrorMessage("");

        descriptionComponent = new CompStringInputLarge(ValidatorFactory.getInstance().getGroupDescriptionValidator());
        descriptionComponent.setCaption("Description:");
        descriptionComponent.setCaptionSize(100);
        descriptionComponent.setInputSize(200, 100);
        descriptionComponent.setErrorMessageSize(200);
        descriptionComponent.setErrorMessage("");

        resourcesComponent = new CompStringInputLarge(ValidatorFactory.getInstance().getGroupResourcesValidator());
        resourcesComponent.setCaption("Resources:");
        resourcesComponent.setCaptionSize(80);
        resourcesComponent.setInputSize(200, 100);
        resourcesComponent.setErrorMessageSize(200);
        resourcesComponent.setErrorMessage("");

        List<Place> places;
        try {
            TransferObject response = ControllerSO.getInstance().getAllPlaces();
            if (response.getResponseType() == ResponseType.SUCCESS) {
                places = (List<Place>) response.getArgument();
                if (places == null || places.isEmpty()) {
                    placeComponent = new CompPlaceInput(null, ValidatorFactory.getInstance().getPlaceValidator());
                    placeComponent.setErrorMessageSize(200);
                    placeComponent.setErrorMessage("There are no places!");
                } else {
                    Place[] pom = places.toArray(new Place[0]);
                    placeComponent = new CompPlaceInput(pom, ValidatorFactory.getInstance().getPlaceValidator());
                    placeComponent.setErrorMessageSize(200);
                    placeComponent.setErrorMessage("");
                }
            } else {
                throw response.getException();
            }

        } catch (CustomException ex) {
            ex.printStackTrace();
            placeComponent = new CompPlaceInput(null, ValidatorFactory.getInstance().getPlaceValidator());
            placeComponent.setErrorMessageSize(200);
            placeComponent.setErrorMessage("Unable to retreive places!");
        }
        placeComponent.setCaption("Place:");
        placeComponent.setInputSize(200);
        placeComponent.setCaptionSize(80);

        pnlGroupComponents.add((JPanel) crnComponent, "cell 0 0,align left top");
        pnlGroupComponents.add((JPanel) descriptionComponent, "cell 0 1,align left top");
        pnlGroupComponents.add((JPanel) hasLiscenceComponent, "cell 0 2,align left top");
        pnlGroupComponents.add((JPanel) nameComponent, "cell 1 0,align left top");
        pnlGroupComponents.add((JPanel) resourcesComponent, "cell 1 1,align left top");
        pnlGroupComponents.add((JPanel) placeComponent, "cell 1 2,align left top");
    }

    private void setActivityComponents() {
        activityOrderNumberComponent = new CompNumberInput(ValidatorFactory.getInstance().getHikingActivityOrderNumberValidator());
        activityOrderNumberComponent.setCaption("Order number:");
        activityOrderNumberComponent.setCaptionSize(100);
        activityOrderNumberComponent.setInputSize(200);
        activityOrderNumberComponent.setErrorMessageSize(200);
        activityOrderNumberComponent.setErrorMessage("");
        activityOrderNumberComponent.setEnabledInput(false);

        activityNameComponent = new CompStringInput(ValidatorFactory.getInstance().getHikingActivityNameValidator());
        activityNameComponent.setCaption("Name:");
        activityNameComponent.setCaptionSize(100);
        activityNameComponent.setInputSize(200);
        activityNameComponent.setErrorMessageSize(200);
        activityNameComponent.setErrorMessage("");
        activityNameComponent.setEnabledInput(false);

        activityDescriptionComponent = new CompStringInputLarge(ValidatorFactory.getInstance().getHikingActivityDescriptionValidator());
        activityDescriptionComponent.setCaption("Description:");
        activityDescriptionComponent.setCaptionSize(100);
        activityDescriptionComponent.setInputSize(200, 100);
        activityDescriptionComponent.setErrorMessageSize(200);
        activityDescriptionComponent.setErrorMessage("");
        activityDescriptionComponent.setEnabledInput(false);

        activityDateComponent = new CompDateAdvanced();
        activityDateComponent.setCaption("Date:");
        activityDateComponent.setCaptionSize(120);
        activityDateComponent.setErrorMessage("");
        activityDateComponent.setEnabledInput(false);

        pnlActivityAddComponents.add((JPanel) activityOrderNumberComponent, "cell 0 0");
        pnlActivityAddComponents.add((JPanel) activityNameComponent, "cell 0 1");
        pnlActivityAddComponents.add((JPanel) activityDescriptionComponent, "cell 0 2");
        pnlActivityAddComponents.add((JPanel) activityDateComponent, "cell 0 3");
    }

    private void setTable() {
        tblModel = new GroupActivityTableModel();
        tblActivities = new JTable(tblModel);
        scrollPane = new JScrollPane(tblActivities);

        Dimension d = scrollPane.getPreferredSize();
        d.setSize(600, 200);
        scrollPane.setPreferredSize(d);

        pnlActivityViewTable.add(scrollPane, "cell 0 0");
    }

    private void setButtons() {
        setGroupButtons();
        setActivityViewButtons();
        setActivityAddButtons();
        addListeners();
    }

    private void setGroupButtons() {
        btnGroupSave = new JButton("Save");
        btnGroupSave.setFocusable(false);
        pnlGroupButtons.add(btnGroupSave);
    }

    private void setActivityViewButtons() {
        btnActivityAdd = new JButton("Add");
        btnActivityViewEdit = new JButton("Edit");
        btnActivityRemove = new JButton("Remove");

        btnActivityAdd.setFocusable(false);
        btnActivityViewEdit.setFocusable(false);
        btnActivityRemove.setFocusable(false);

        pnlActivityViewButtons.add(btnActivityAdd, "cell 0 0");
        pnlActivityViewButtons.add(btnActivityViewEdit, "cell 0 1");
        pnlActivityViewButtons.add(btnActivityRemove, "cell 0 2");

    }

    private void setActivityAddButtons() {
        btnActivitySave = new JButton("Save");

        btnActivitySave.setFocusable(false);

        pnlActivityAddButtons.add(btnActivitySave, "cell 0 1");
    }

    private void addListeners() {
        btnGroupSave.addActionListener(((ActionEvent) -> {
            btnGroupSavePressed();
        }));
        btnActivityAdd.addActionListener(((ActionEvent) -> {
            btnActivityAddPressed();
        }));
        btnActivityViewEdit.addActionListener(((ActionEvent) -> {
            btnActivityViewEditPressed();
        }));
        btnActivityRemove.addActionListener(((ActionEvent) -> {
            btnActivityRemovePressed();
        }));
        btnActivitySave.addActionListener(((ActionEvent) -> {
            btnActivitySavePressed();
        }));
    }
//=====================================================================================
//=======================BUTTONS ACTIONS===============================================
//=====================================================================================

    private void btnGroupSavePressed() {
        //TODO
        crnComponent.setErrorMessage("");
        nameComponent.setErrorMessage("");
        descriptionComponent.setErrorMessage("");
        resourcesComponent.setErrorMessage("");
        hasLiscenceComponent.setErrorMessage("");
        placeComponent.setErrorMessage("");

        String crn = "";
        String name = "";
        String description = "";
        String resources = "";
        boolean hasLiscence = true;
        Place place = null;

        String errorMessage = "";
        boolean gate = true;

        try {
            crn = crnComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            crnComponent.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            name = nameComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            nameComponent.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            description = descriptionComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            descriptionComponent.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            resources = resourcesComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            resourcesComponent.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            hasLiscence = hasLiscenceComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            hasLiscenceComponent.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage() + "\n";
            gate = false;
        }
        try {
            place = placeComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            placeComponent.setErrorMessage(ex.getMessage());
            errorMessage += ex.getMessage();
            gate = false;
        }
        if (gate) {
            mainGroup.setCrn(crn);
            mainGroup.setName(name);
            mainGroup.setDescription(description);
            mainGroup.setResources(resources);
            mainGroup.setHasLiscence(hasLiscence);
            mainGroup.setPlace(place);
            mainGroup.setGroupActivities(tblModel.getAllActivities());
            try {
                ControllerSO.getInstance().createHikingGroup(mainGroup);
                Window.successfulOperation(this, "Created hiker group", "Successful creation of new hiker group!");
                ControllerForms.getInstance().closeFrmGroupCreate();
            } catch (CustomException ex) {
                ex.printStackTrace();
                Window.unSuccessfulOperation(this, "Failed to create hiker group", ex.getMessage());
            }
        } else {
            Window.unSuccessfulOperation(this, "Failed to create hiker group", errorMessage.trim());
        }
    }

    private void btnActivityAddPressed() {
        HikingActivity newActivity = new HikingActivity();
        newActivity.setHikingGroup(mainGroup);
        tblModel.addActivity(newActivity);
        tblModel.fireTableRowsInserted(tblModel.getRowCount(), tblModel.getRowCount());
    }

    private void btnActivityRemovePressed() {
        int[] rows = tblActivities.getSelectedRows();
        if (rows.length == 0) {
            Window.unSuccessfulOperation(this, "Remove activity error", "No selected activity!");
        } else if (rows.length > 1) {
            Window.unSuccessfulOperation(this, "Remove activity error", "Pick 1 activity you wish to remove!");
        } else {
            HikingActivity removedActivity = tblModel.removeActivity(rows[0]);
            if (editableActivity == null) {
                //no activity currently edited on
                tblModel.resetOrderNumbers();
                tblModel.fireTableDataChanged();
            } else if (removedActivity.equals(editableActivity)) {
                //acitvity currently edited on is the one removed
                try {
                    activityOrderNumberComponent.setValue(null);
                } catch (CustomException ex) {
                    ex.printStackTrace();
                }
                try {
                    activityNameComponent.setValue("");
                    activityNameComponent.setEnabledInput(false);
                } catch (CustomException ex) {
                    ex.printStackTrace();
                }
                try {
                    activityDescriptionComponent.setValue("");
                    activityDescriptionComponent.setEnabledInput(false);
                } catch (CustomException ex) {
                    ex.printStackTrace();
                }
                try {
                    activityDateComponent.setValue(new GregorianCalendar());
                    activityDateComponent.setEnabledInput(false);
                } catch (CustomException ex) {
                    ex.printStackTrace();
                }
                editableActivity = null;
                tblModel.resetOrderNumbers();
                tblModel.fireTableDataChanged();
            } else {
                //activity currently edited on is different from the one removed
                if (removedActivity.getOrderNum() < editableActivity.getOrderNum()) {
                    editableActivity.setOrderNum(editableActivity.getOrderNum() - 1);
                    try {
                        activityOrderNumberComponent.setValue(editableActivity.getOrderNum());
                    } catch (CustomException ex) {
                        ex.printStackTrace();
                    }
                    tblModel.resetOrderNumbers();
                    tblModel.fireTableDataChanged();
                } else {
                    tblModel.resetOrderNumbers();
                    tblModel.fireTableDataChanged();
                }
            }
        }
    }

    private void btnActivityViewEditPressed() {
        int[] rows = tblActivities.getSelectedRows();
        if (rows.length == 0) {
            Window.unSuccessfulOperation(this, "Edit activity error", "No selected activity!");
        } else if (rows.length > 1) {
            Window.unSuccessfulOperation(this, "Edit activity error", "Pick 1 activity you wish to edit!");
        } else {
            editableActivity = tblModel.getActivity(rows[0]);
            if (editableActivity != null) {
                String pom = "" + editableActivity.getOrderNum();
                try {
                    activityOrderNumberComponent.setValue(Integer.parseInt(pom));
                } catch (CustomException ex) {
                    ex.printStackTrace();
                }
                try {
                    activityNameComponent.setValue(editableActivity.getName());
                    activityNameComponent.setEnabledInput(true);
                } catch (CustomException ex) {
                    ex.printStackTrace();
                }
                try {
                    activityDescriptionComponent.setValue(editableActivity.getDescription());
                    activityDescriptionComponent.setEnabledInput(true);
                } catch (CustomException ex) {
                    ex.printStackTrace();
                }
                try {
                    activityDateComponent.setValue(editableActivity.getDate());
                    activityDateComponent.setEnabledInput(true);
                } catch (CustomException ex) {
                    ex.printStackTrace();
                }
            } else {
                Window.unSuccessfulOperation(this, "Edit activity error", "No selected activity!");
            }
        }
    }

    private void btnActivitySavePressed() {
        activityOrderNumberComponent.setErrorMessage("");
        activityNameComponent.setErrorMessage("");
        activityDescriptionComponent.setErrorMessage("");
        activityDateComponent.setErrorMessage("");

        Integer orN = 0;
        String name = "";
        String description = "";
        GregorianCalendar date = null;
        boolean gate = true;
        try {
            orN = activityOrderNumberComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            activityOrderNumberComponent.setErrorMessage(ex.getMessage());
            gate = false;
        }
        try {
            name = activityNameComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            activityNameComponent.setErrorMessage(ex.getMessage());
            gate = false;
        }
        try {
            description = activityDescriptionComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            activityDescriptionComponent.setErrorMessage(ex.getMessage());
            gate = false;
        }
        try {
            date = activityDateComponent.getValue();
        } catch (CustomException ex) {
            ex.printStackTrace();
            activityDateComponent.setErrorMessage(ex.getMessage());
            gate = false;
        }
        if (gate) {
            //TODOOO
//            HikingActivity updatedGroup = new HikingActivity(orN, name, description, date, mainGroup);
            HikingActivity updatedGroup = new HikingActivity();
            tblModel.updateActivity(updatedGroup);
            tblModel.fireTableRowsUpdated(updatedGroup.getOrderNum() - 1, updatedGroup.getOrderNum() - 1);
        }

    }
//===================================================================================


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
