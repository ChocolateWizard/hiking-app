/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.borak.hikingapp.commonlib.view.components.design;

import com.borak.hikingapp.commonlib.view.components.api.IComponent;
import com.borak.hikingapp.commonlib.view.components.validators.api.IValidator;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Despot
 */
public abstract class CompTwoRadioButton<ComponentType, ValidatorType> extends javax.swing.JPanel implements IComponent<ComponentType> {

    private JLabel lblCaption;
    private JLabel lblErrorMessage;
    protected JRadioButton rb1;
    protected JRadioButton rb2;
    protected ButtonGroup rbGroup;
    protected IValidator<ValidatorType> validator;

    public CompTwoRadioButton(String firstOption, String secondOption, IValidator validator) {
        initComponents();
        this.validator = validator;
        initialize(firstOption, secondOption);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initialize(String firstOption, String secondOption) {
        MigLayout mig = new MigLayout("insets 0 0 0 0", "[]0[]0[]", "[]0[]");
        this.setLayout(mig);
        setComponents(firstOption, secondOption);
    }

    private void setComponents(String firstOption, String secondOption) {
        setCaption();
        setFirstRadioButton(firstOption);
        setSecondRadioButton(secondOption);
        setRadioButtonGroup();
        setErrorMessage();

        this.add(lblCaption, "cell 0 0");
        this.add(rb1, "cell 1 0");
        this.add(rb2, "cell 2 0");
        this.add(lblErrorMessage, "cell 1 1 2 1");
    }

    private void setCaption() {
        lblCaption = new JLabel("Caption");
//        Dimension d = lblCaption.getPreferredSize();
//        int width = (int) d.getWidth();
//        int height = (int) d.getHeight();
//        lblCaption.setPreferredSize(new Dimension(100, height));
    }

    private void setFirstRadioButton(String firstOption) {
        rb1 = new JRadioButton(firstOption);
        rb1.setFocusable(false);
        rb1.setSelected(true);
    }

    private void setSecondRadioButton(String secondOption) {
        rb2 = new JRadioButton(secondOption);
        rb2.setFocusable(false);
    }

    private void setRadioButtonGroup() {
        rbGroup = new ButtonGroup();
        rbGroup.add(rb1);
        rbGroup.add(rb2);
    }

    private void setErrorMessage() {
        lblErrorMessage = new JLabel("ErrorMessage");
//        Dimension d = lblErrorMessage.getPreferredSize();
//        int width = (int) d.getWidth();
//        int height = (int) d.getHeight();
//        lblErrorMessage.setPreferredSize(new Dimension(200, height));
        lblErrorMessage.setForeground(Color.red);
    }
//===============================METHODS=========================================
//-------------------------------CAPTION-----------------------------------------

    @Override
    public void setCaption(String caption) {
        lblCaption.setText(caption);
    }

    @Override
    public void setCaption(String[] caption) {
        caption = formatArrayString(caption);
        if (caption != null && caption.length > 0) {
            for (int i = 0; (i < caption.length && i < 3); i++) {
                switch (i) {
                    case 0 ->
                        lblCaption.setText(caption[i]);
                    case 1 ->
                        rb1.setText(caption[i]);
                    case 2 ->
                        rb2.setText(caption[i]);
                    default -> {
                    }
                }
            }
        }
    }

    @Override
    public void setCaptionSize(int width) {
        Dimension d = lblCaption.getPreferredSize();
        d.setSize(width, d.getHeight());
        lblCaption.setPreferredSize(d);
    }

    @Override
    public void setCaptionSize(int width, int height) {
        lblCaption.setPreferredSize(new Dimension(width, height));
    }
//-----------------------------ERROR MESSAGE-------------------------------------

    @Override
    public void setErrorMessage(String errorMessage) {
        lblErrorMessage.setText(errorMessage);
    }

    @Override
    public void setErrorMessageSize(int width) {
        Dimension d = lblErrorMessage.getPreferredSize();
        d.setSize(width, d.getHeight());
        lblErrorMessage.setPreferredSize(d);
    }

    @Override
    public void setErrorMessageSize(int width, int height) {
        lblErrorMessage.setPreferredSize(new Dimension(width, height));
    }
//----------------------------INPUT----------------------------------------------

    @Override
    public void setInputSize(int width) {
        Dimension d1 = rb1.getPreferredSize();
        Dimension d2 = rb2.getPreferredSize();
        d1.setSize(width, d1.getHeight());
        d2.setSize(width, d2.getHeight());
        rb1.setPreferredSize(d1);
        rb2.setPreferredSize(d2);
    }

    @Override
    public void setInputSize(int width, int height) {
        rb1.setPreferredSize(new Dimension(width, height));
        rb2.setPreferredSize(new Dimension(width, height));
    }

    @Override
    public void setInputSize(Integer[] width) {
        width = formatArray(width);
        if (width != null && width.length > 0) {
            Dimension d;
            for (int i = 0; (i < width.length && i < 2); i++) {
                switch (i) {
                    case 0 -> {
                        d = rb1.getPreferredSize();
                        d.setSize(width[i], d.getHeight());
                        rb1.setPreferredSize(d);
                    }
                    case 1 -> {
                        d = rb2.getPreferredSize();
                        d.setSize(width[i], d.getHeight());
                        rb2.setPreferredSize(d);
                    }
                    default -> {
                    }
                }
            }
        }
    }

    @Override
    public void setInputSize(Integer[] width, Integer[] height) {
        width = formatArray(width);
        height = formatArray(height);
        if ((width != null && width.length > 0) && (height != null && height.length > 0)) {
            //both width and height got atleast 1 element
            for (int i = 0; i < findMax(width.length, height.length) && i < 2; i++) {
                switch (i) {
                    case 0 ->
                        rb1.setPreferredSize(new Dimension(width[i], height[i]));
                    case 1 -> {
                        Dimension d;
                        if (i >= width.length) {
                            d = rb2.getPreferredSize();
                            d.setSize(d.getWidth(), height[i]);
                            rb2.setPreferredSize(d);
                        } else if (i >= height.length) {
                            d = rb2.getPreferredSize();
                            d.setSize(width[i], d.getHeight());
                            rb2.setPreferredSize(d);
                        } else {
                            rb2.setPreferredSize(new Dimension(width[i], height[i]));
                        }
                    }
                    default -> {
                    }
                }
            }
        } else if (width != null && width.length > 0) {
            //only width has atleast 1 element
            Dimension d;
            for (int i = 0; (i < width.length && i < 2); i++) {
                switch (i) {
                    case 0 -> {
                        d = rb1.getPreferredSize();
                        d.setSize(width[i], d.getHeight());
                        rb1.setPreferredSize(d);
                    }
                    case 1 -> {
                        d = rb2.getPreferredSize();
                        d.setSize(width[i], d.getHeight());
                        rb2.setPreferredSize(d);
                    }
                    default -> {
                    }
                }
            }
        } else if (height != null && height.length > 0) {
            //only height has atleast 1 element
            Dimension d;
            for (int i = 0; (i < height.length && i < 2); i++) {
                switch (i) {
                    case 0 -> {
                        d = rb1.getPreferredSize();
                        d.setSize(d.getWidth(), height[i]);
                        rb1.setPreferredSize(d);
                    }
                    case 1 -> {
                        d = rb2.getPreferredSize();
                        d.setSize(d.getWidth(), height[i]);
                        rb2.setPreferredSize(d);
                    }
                    default -> {
                    }
                }
            }
        }

    }

    @Override
    public void setBackgroundColor(Color color) {
        setBackground(color);
    }

    @Override
    public void setEnabledInput(boolean isEnabled) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

//===============================================================================
    private int findMax(int a, int b) {
        return a > b ? a : b;
    }

    private Integer[] formatArray(Integer[] n) {
        if (n == null || n.length == 0) {
            return n;
        }
        List<Integer> list = new ArrayList<>(n.length);
        for (Integer n1 : n) {
            if (n1 != null) {
                list.add(n1);
            }
        }
        return list.toArray(Integer[]::new);
    }

    private String[] formatArrayString(String[] n) {
        if (n == null || n.length == 0) {
            return n;
        }
        List<String> list = new ArrayList<>(n.length);
        for (String n1 : n) {
            if (n1 != null) {
                list.add(n1);
            }
        }
        return list.toArray(String[]::new);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
