/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.borak.hikingapp.commonlib.view.components.design;

import com.borak.hikingapp.commonlib.exceptions.CustomException;
import com.borak.hikingapp.commonlib.view.components.api.IComponent;
import com.borak.hikingapp.commonlib.view.components.validators.api.IValidator;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JTextField;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Despot
 * @param <ComponentType>
 * @param <ValidatorType>
 */
public abstract class CompOneTextBox<ComponentType, ValidatorType> extends javax.swing.JPanel implements IComponent<ComponentType> {

    private JLabel lblCaption;
    protected JTextField txtField;
    private JLabel lblErrorMessage;
    protected IValidator<ValidatorType> validator;

    public CompOneTextBox(IValidator validator) {
        initComponents();
        this.validator = validator;
        initialize();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initialize() {
        MigLayout mig = new MigLayout("insets 0 0 0 0", "[]0[]", "[]0[]");
        setLayout(mig);
        setComponents();
    }

    private void setComponents() {
        setCaption();
        setInputField();
        setErrorMessage();

        add(lblCaption, "cell 0 0");
        add(txtField, "cell 1 0,align right");
        add(lblErrorMessage, "cell 1 1");
    }

    private void setCaption() {
        lblCaption = new JLabel("Caption");
    }

    private void setInputField() {
        txtField = new JTextField();
    }

    private void setErrorMessage() {
        lblErrorMessage = new JLabel("Error message");
        lblErrorMessage.setForeground(Color.red);
    }

//===============================METHODS=========================================
//-------------------------------CAPTION-----------------------------------------
    @Override
    public void setCaption(String caption) {
        lblCaption.setText(caption);
    }

    @Override
    public void setAllCaptions(String[] caption) {
        if (caption != null) {
            caption = formatArrayString(caption);
            if (caption.length > 0) {
                lblCaption.setText(caption[0]);
            }
        }
    }

    @Override
    public void setCaptionWidth(int width) {
        Dimension d = lblCaption.getPreferredSize();
        d.setSize(width, d.getHeight());
        lblCaption.setPreferredSize(d);
    }

    @Override
    public void setCaptionSize(int width, int height) {
        lblCaption.setPreferredSize(new Dimension(width, height));
    }

//-----------------------------ERROR MESSAGE-------------------------------------
    @Override
    public void setErrorMessage(String errorMessage) {
        lblErrorMessage.setText(errorMessage);
    }

    @Override
    public void setErrorMessageWidth(int width) {
        Dimension d = lblErrorMessage.getPreferredSize();
        d.setSize(width, d.getHeight());
        lblErrorMessage.setPreferredSize(d);
    }

    @Override
    public void setErrorMessageSize(int width, int height) {
        lblErrorMessage.setPreferredSize(new Dimension(width, height));
    }
//----------------------------INPUT----------------------------------------------

    @Override
    public void setInputWidth(int width) {
        Dimension d = txtField.getPreferredSize();
        d.setSize(width, d.getHeight());
        txtField.setPreferredSize(d);
    }

    @Override
    public void setInputSize(int width, int height) {
        txtField.setPreferredSize(new Dimension(width, height));
    }

    @Override
    public void setAllInputsWidth(Integer[] width) {
        width = formatArray(width);
        if (width != null && width.length > 0) {
            Dimension d = txtField.getPreferredSize();
            d.setSize(width[0], d.getHeight());
            txtField.setPreferredSize(d);
        }
    }

    @Override
    public void setAllInputsSize(Integer[] width, Integer[] height) {
        Dimension d = txtField.getPreferredSize();
        if (width != null) {
            width = formatArray(width);
            if (width.length > 0) {
                d.width = width[0];
            }
        }
        if (height != null) {
            height = formatArray(height);
            if (height.length > 0) {
                d.height = height[0];
            }
        }
        txtField.setPreferredSize(d);
    }

    @Override
    public void loadValues(ComponentType[] values) throws CustomException {
        throw new UnsupportedOperationException("Method 'loadValues(ComponentType[] values)' not supported!");
    }

    @Override
    public void setBackgroundColor(Color color) {
        setBackground(color);
    }

    @Override
    public void setEnabledInput(boolean isEnabled) {
        txtField.setEnabled(isEnabled);
    }

//===================================================================================
    private int findMax(int a, int b) {
        return a > b ? a : b;
    }

    private Integer[] formatArray(Integer[] n) {
        List<Integer> list = new LinkedList<>();
        for (int i = 0; i < n.length; i++) {
            if (n[i] != null) {
                list.add(n[i]);
            }
        }
        return list.toArray(Integer[]::new);
    }

    private String[] formatArrayString(String[] n) {
        List<String> list = new LinkedList<>();
        for (int i = 0; i < n.length; i++) {
            if (n[i] != null) {
                list.add(n[i]);
            }
        }
        return list.toArray(String[]::new);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
