/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.borak.hikingapp.commonlib.view.components.design;

import com.borak.hikingapp.commonlib.exceptions.CustomException;
import com.borak.hikingapp.commonlib.view.components.api.IComponent;
import com.borak.hikingapp.commonlib.view.components.validators.api.IValidator;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author Despot
 */
public abstract class CompOneComboBox<ComponentType, ValidatorType> extends javax.swing.JPanel implements IComponent<ComponentType> {
    
    private JLabel lblCaption;
    protected JComboBox<ComponentType> cbField;
    private JLabel lblErrorMessage;
    protected IValidator<ValidatorType> validator;
    
    public CompOneComboBox(ComponentType[] arrayOfElements, IValidator validator) {
        initComponents();
        this.validator = validator;
        initialize(arrayOfElements);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initialize(ComponentType[] arrayOfElements) {
        MigLayout mig = new MigLayout("insets 0 0 0 0", "[]0[]", "[]0[]");
        setLayout(mig);
        setComponents(arrayOfElements);
        
    }
    
    private void setComponents(ComponentType[] arrayOfElements) {
        setCaption();
        setInputField(arrayOfElements);
        setErrorMessage();
        
        add(lblCaption, "cell 0 0");
        add(cbField, "cell 1 0");
        add(lblErrorMessage, "cell 1 1");
    }
    
    private void setCaption() {
        lblCaption = new JLabel("Caption");
    }
    
    private void setInputField(ComponentType[] arrayOfElements) {
        if (arrayOfElements == null || arrayOfElements.length == 0) {
            cbField = new JComboBox<>();
            cbField.setEnabled(false);
        } else {
            cbField = new JComboBox<>(arrayOfElements);
        }
        
        Dimension d = cbField.getPreferredSize();
        //int width = (int) d.getWidth();
        int height = (int) d.getHeight();
        cbField.setPreferredSize(new Dimension(200, height));
    }
    
    private void setErrorMessage() {
        lblErrorMessage = new JLabel("ErrorMessage");
        lblErrorMessage.setForeground(Color.red);
    }

    //===============================METHODS=========================================
//-------------------------------CAPTION-----------------------------------------
    @Override
    public void loadValues(ComponentType[] values) throws CustomException {
        cbField.removeAllItems();
        if (values != null) {
            for(int i=0;i<values.length;i++){
                cbField.addItem(values[i]);
            }
        }
    }
    
    @Override
    public void setCaption(String caption) {
        lblCaption.setText(caption);
    }
    
    @Override
    public void setAllCaptions(String[] caption) {
        caption = formatArrayString(caption);
        if (caption != null && caption.length > 0) {
            lblCaption.setText(caption[0]);
        }
    }
    
    @Override
    public void setCaptionWidth(int width) {
        Dimension d = lblCaption.getPreferredSize();
        d.setSize(width, d.getHeight());
        lblCaption.setPreferredSize(d);
    }
    
    @Override
    public void setCaptionSize(int width, int height) {
        lblCaption.setPreferredSize(new Dimension(width, height));
    }
//-----------------------------ERROR MESSAGE-------------------------------------

    @Override
    public void setErrorMessage(String errorMessage) {
        lblErrorMessage.setText(errorMessage);
    }
    
    @Override
    public void setErrorMessageWidth(int width) {
        Dimension d = lblErrorMessage.getPreferredSize();
        d.setSize(width, d.getHeight());
        lblErrorMessage.setPreferredSize(d);
    }
    
    @Override
    public void setErrorMessageSize(int width, int height) {
        lblErrorMessage.setPreferredSize(new Dimension(width, height));
    }
//----------------------------INPUT----------------------------------------------

    @Override
    public void setInputWidth(int width) {
        Dimension d = cbField.getPreferredSize();
        d.setSize(width, d.getHeight());
        cbField.setPreferredSize(d);
    }
    
    @Override
    public void setInputSize(int width, int height) {
        cbField.setPreferredSize(new Dimension(width, height));
    }
    
    @Override
    public void setAllInputsWidth(Integer[] width) {
        width = formatArray(width);
        if (width != null && width.length > 0) {
            Dimension d = cbField.getPreferredSize();
            d.setSize(width[0], d.getHeight());
            cbField.setPreferredSize(d);
        }
    }
    
    @Override
    public void setAllInputsSize(Integer[] width, Integer[] height) {
        width = formatArray(width);
        height = formatArray(height);
        
        if ((width != null && width.length > 0) && (height != null && height.length > 0)) {
            //both width and height got atleast 1 element
            cbField.setPreferredSize(new Dimension(width[0], height[0]));
        } else if (width != null && width.length > 0) {
            //only width has atleast 1 element
            Dimension d = cbField.getPreferredSize();
            d.setSize(width[0], d.getHeight());
            cbField.setPreferredSize(d);
        } else if (height != null && height.length > 0) {
            //only height has atleast 1 element
            Dimension d = cbField.getPreferredSize();
            d.setSize(d.getWidth(), height[0]);
            cbField.setPreferredSize(d);
        }
    }
    
    @Override
    public void setBackgroundColor(Color color) {
        setBackground(color);
    }
    
    @Override
    public void setEnabledInput(boolean isEnabled) {
        cbField.setEnabled(isEnabled);
    }

//===================================================================================
    private int findMax(int a, int b) {
        return a > b ? a : b;
    }
    
    private Integer[] formatArray(Integer[] n) {
        if (n == null || n.length == 0) {
            return n;
        }
        List<Integer> list = new ArrayList<>(n.length);
        for (Integer n1 : n) {
            if (n1 != null) {
                list.add(n1);
            }
        }
        return list.toArray(Integer[]::new);
    }
    
    private String[] formatArrayString(String[] n) {
        if (n == null || n.length == 0) {
            return n;
        }
        List<String> list = new ArrayList<>(n.length);
        for (String n1 : n) {
            if (n1 != null) {
                list.add(n1);
            }
        }
        return list.toArray(String[]::new);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
